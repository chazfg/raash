#[derive(Debug)]
pub enum SpecialUtil {
    Break,
    Colon,
    Continue,
    Dot,
    Eval,
    Exec,
    Exit,
    Export,
    Readonly,
    Return,
    Set,
    Shift,
    Times,
    Trap,
    Unset,
}

impl SpecialUtil {
    pub fn from(i: &str) -> Option<Self> {
        match i {
            "break" => Some(Self::Break),
            ":" => Some(Self::Colon),
            "continue" => Some(Self::Continue),
            "." => Some(Self::Dot),
            "eval" => Some(Self::Eval),
            "exec" => Some(Self::Exec),
            "exit" => Some(Self::Exit),
            "export" => Some(Self::Export),
            "readonly" => Some(Self::Readonly),
            "return" => Some(Self::Return),
            "set" => Some(Self::Set),
            "shift" => Some(Self::Shift),
            "times" => Some(Self::Times),
            "trap" => Some(Self::Trap),
            "unset" => Some(Self::Unset),
            _ => None,
        }
    }
}

#[derive(Debug)]
pub enum Util {
    Alloc,
    Autoload,
    Bind,
    Bindkey,
    Builtin,
    Bye,
    Caller,
    Cap,
    Chdir,
    Clone,
    Comparguments,
    Compcall,
    Compctl,
    Compdescribe,
    Compfiles,
    Compgen,
    Compgroups,
    Complete,
    Compquote,
    Comptags,
    Comptry,
    Compvalues,
    Declare,
    Dirs,
    Disable,
    Disown,
    Dosh,
    Echotc,
    Echoti,
    Help,
    History,
    Hist,
    Let,
    Local,
    Login,
    Logout,
    Map,
    Mapfile,
    Popd,
    Print,
    Pushd,
    Readarray,
    Repeat,
    Savehistory,
    Source,
    Shopt,
    Stop,
    Suspend,
    Typeset,
    Whence,
}

impl Util {
    pub fn from(i: &str) -> Option<Self> {
        match i {
            "alloc" => Some(Self::Alloc),
            "autoload" => Some(Self::Autoload),
            "bind" => Some(Self::Bind),
            "bindkey" => Some(Self::Bindkey),
            "builtin" => Some(Self::Builtin),
            "bye" => Some(Self::Bye),
            "caller" => Some(Self::Caller),
            "cap" => Some(Self::Cap),
            "chdir" => Some(Self::Chdir),
            "clone" => Some(Self::Clone),
            "comparguments" => Some(Self::Comparguments),
            "compcall" => Some(Self::Compcall),
            "compctl" => Some(Self::Compctl),
            "compdescribe" => Some(Self::Compdescribe),
            "compfiles" => Some(Self::Compfiles),
            "compgen" => Some(Self::Compgen),
            "compgroups" => Some(Self::Compgroups),
            "complete" => Some(Self::Complete),
            "compquote" => Some(Self::Compquote),
            "comptags" => Some(Self::Comptags),
            "comptry" => Some(Self::Comptry),
            "compvalues" => Some(Self::Compvalues),
            "declare" => Some(Self::Declare),
            "dirs" => Some(Self::Dirs),
            "disable" => Some(Self::Disable),
            "disown" => Some(Self::Disown),
            "dosh" => Some(Self::Dosh),
            "echotc" => Some(Self::Echotc),
            "echoti" => Some(Self::Echoti),
            "help" => Some(Self::Help),
            "history" => Some(Self::History),
            "hist" => Some(Self::Hist),
            "let" => Some(Self::Let),
            "local" => Some(Self::Local),
            "login" => Some(Self::Login),
            "logout" => Some(Self::Logout),
            "map" => Some(Self::Map),
            "mapfile" => Some(Self::Mapfile),
            "popd" => Some(Self::Popd),
            "print" => Some(Self::Print),
            "pushd" => Some(Self::Pushd),
            "readarray" => Some(Self::Readarray),
            "repeat" => Some(Self::Repeat),
            "savehistory" => Some(Self::Savehistory),
            "source" => Some(Self::Source),
            "shopt" => Some(Self::Shopt),
            "stop" => Some(Self::Stop),
            "suspend" => Some(Self::Suspend),
            "typeset" => Some(Self::Typeset),
            "whence" => Some(Self::Whence),
            _ => None,
        }
    }
}

#[derive(Debug)]
pub enum TOrU {
    Alias,
    Bg,
    Cd,
    Command,
    False,
    Fc,
    Fg,
    Getopts,
    Hash,
    Jobs,
    Kill,
    Newgrp,
    Pwd,
    Read,
    True,
    Umask,
    Unalias,
    Wait,
}

impl TOrU {
    pub fn from(i: &str) -> Option<Self> {
        match i {
            "Alias" => Some(Self::Alias),
            "Bg" => Some(Self::Bg),
            "Cd" => Some(Self::Cd),
            "Command" => Some(Self::Command),
            "False" => Some(Self::False),
            "Fc" => Some(Self::Fc),
            "Fg" => Some(Self::Fg),
            "Getopts" => Some(Self::Getopts),
            "Hash" => Some(Self::Hash),
            "Jobs" => Some(Self::Jobs),
            "Kill" => Some(Self::Kill),
            "Newgrp" => Some(Self::Newgrp),
            "Pwd" => Some(Self::Pwd),
            "Read" => Some(Self::Read),
            "True" => Some(Self::True),
            "Umask" => Some(Self::Umask),
            "Unalias" => Some(Self::Unalias),
            "Wait" => Some(Self::Wait),
            _ => None,
        }
    }
}
